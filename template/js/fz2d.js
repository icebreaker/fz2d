// Generated by CoffeeScript 1.9.2
var Fz2D,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Fz2D = (function() {
  function Fz2D() {}

  Fz2D.VERSION = '0.0.1';

  Fz2D.NONE = 0;

  Fz2D.TOP = 1 << 1;

  Fz2D.LEFT = 1 << 2;

  Fz2D.RIGHT = 1 << 3;

  Fz2D.BOTTOM = 1 << 4;

  Fz2D.FG = '#FFFFFF';

  Fz2D.BG = '#000000';

  Fz2D.SELECTOR = '#canvas';

  Fz2D.PATH = 'assets';

  Fz2D.query = (function() {
    var hash, j, k, kk, len, q, query, ref, ref1, v, vv;
    hash = {};
    query = window.location.href.split('?').pop();
    ref = query.split('&');
    for (j = 0, len = ref.length; j < len; j++) {
      q = ref[j];
      ref1 = q.split('='), k = ref1[0], v = ref1[1];
      kk = unescape(k);
      vv = unescape(v);
      if (/^\d+$/.test(vv)) {
        vv = parseInt(vv);
      } else if (/^true|false$/i.test(vv)) {
        vv = JSON.parse(vv);
        if (!(kk in Fz2D)) {
          if (vv) {
            Fz2D[kk] = kk;
          }
        }
      }
      hash[kk] = vv;
    }
    return hash;
  })();

  Fz2D.url = (function() {
    return window.location.href.split('?')[0];
  })();

  Fz2D.https = (function() {
    if (window.location.protocol === 'https:') {
      return 'https';
    } else {
      return null;
    }
  })();

  Fz2D.production = null;

  Fz2D.development = (function() {
    if (Fz2D.debug != null) {
      return 'development';
    }
    if (/localhost|127.0.0.1|192.168.\d+.\d+/i.test(window.location.hostname)) {
      return 'development';
    }
    Fz2D.production = 'production';
    return null;
  })();

  Fz2D.touch = (function() {
    if (Fz2D.forcetouch != null) {
      return 'supported';
    }
    if (indexOf.call(window, 'ontouchstart') >= 0) {
      return 'supported';
    }
    if (window.DocumentTouch && window.document(instance(DocumentTouch))) {
      return 'supported';
    }
    if (window.navigator.maxTouchPoints > 0 || window.navigator.msMaxTouchPoints > 0) {
      return 'supported';
    }
    return null;
  })();

  Fz2D.mobile = (function() {
    var m;
    m = window.navigator.userAgent.match(/(iphone|ipod|ipad|android|iemobile|blackberry|bada)/i);
    if (m) {
      return m[1];
    } else {
      return null;
    }
  })();

  Fz2D.firefox = (function() {
    if (/firefox/i.test(window.navigator.userAgent)) {
      return 'firefox';
    } else {
      return null;
    }
  })();

  Fz2D.ie = (function() {
    var m;
    m = window.navigator.userAgent.match(/(msie \d+|iemobile\/\d+|WPDesktop)/i);
    if (m) {
      return parseInt(m[1].replace(/(msie\s+|iemobile\/)/i, '')) || 11;
    } else {
      return null;
    }
  })();

  Fz2D.clamp = function(d, min, max) {
    return Math.min(Math.max(d, min), max);
  };

  Fz2D.step = function(t, d, min, max) {
    var dt;
    dt = t / d;
    return Fz2D.clamp((max * dt) + (min * (1 - dt)), Math.min(min, max), Math.max(min, max));
  };

  Fz2D.dist = function(o1, o2) {
    var dx, dy, x1, x2, y1, y2;
    x1 = o1.x + o1.bounds.x;
    y1 = o1.y + o1.bounds.y;
    x2 = o2.x + o2.bounds.x;
    y2 = o2.y + o2.bounds.y;
    dx = x2 - x1;
    dy = y2 - y1;
    return Math.sqrt(dx * dx + dy * dy);
  };

  Fz2D.distSqr = function(o1, o2) {
    var dx, dy, x1, x2, y1, y2;
    x1 = o1.x + o1.bounds.x;
    y1 = o1.y + o1.bounds.y;
    x2 = o2.x + o2.bounds.x;
    y2 = o2.y + o2.bounds.y;
    dx = x2 - x1;
    dy = y2 - y1;
    return dx * dx + dy * dy;
  };

  Fz2D.getCollisionSide = function(o1, o2) {
    var result, x1, x2, y1, y2;
    x1 = o1.x + o1.bounds.cx;
    y1 = o1.y + o1.bounds.cy;
    x2 = o2.x + o2.bounds.cx;
    y2 = o2.y + o2.bounds.cy;
    result = Fz2D.NONE;
    if (y1 > y2) {
      result |= Fz2D.BOTTOM;
    } else {
      result |= Fz2D.TOP;
    }
    if (x1 > x2) {
      result |= Fz2D.RIGHT;
    } else {
      result |= Fz2D.LEFT;
    }
    return result;
  };

  Fz2D.collide = function(o1, o2, callback) {
    var collide, j, l, len, len1, o3, ref, ref1, x1, x2, y1, y2;
    if (!(o1.exists && o1.solid && o2.exists && o2.solid && o1 !== o2)) {
      return false;
    }
    if (o1._objects && o2._objects) {
      collide = false;
      ref = o1._objects;
      for (j = 0, len = ref.length; j < len; j++) {
        o3 = ref[j];
        if (Fz2D.collide(o3, o2, callback)) {
          collide = true;
        }
      }
      return collide;
    }
    if (o1._objects) {
      o3 = o1;
      o1 = o2;
      o2 = o3;
    }
    if (o2._objects) {
      if (!o2.bounds.isNull() && !Fz2D.overlap(o1, o2)) {
        return false;
      }
      collide = false;
      ref1 = o2._objects;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        o3 = ref1[l];
        if (Fz2D.collide(o1, o3, callback)) {
          collide = true;
        }
      }
      return collide;
    }
    x1 = o1.x + o1.bounds.x;
    y1 = o1.y + o1.bounds.y;
    x2 = o2.x + o2.bounds.x;
    y2 = o2.y + o2.bounds.y;
    if (!((x1 > x2 + o2.bounds.w) || (y1 > y2 + o2.bounds.h) || (x1 + o1.bounds.w < x2) || (y1 + o1.bounds.h < y2))) {
      callback(o1, o2);
      return true;
    } else {
      return false;
    }
  };

  Fz2D.contains = function(o, p) {
    var x, y;
    x = o.x + o.bounds.x;
    y = o.y + o.bounds.y;
    return (p.x >= x) && (p.x <= x + o.bounds.w) && (p.y >= y) && (p.y <= y + o.bounds.h);
  };

  Fz2D.overlap = function(o1, o2) {
    var x1, x2, y1, y2;
    x1 = o1.x + o1.bounds.x;
    y1 = o1.y + o1.bounds.y;
    x2 = o2.x + o2.bounds.x;
    y2 = o2.y + o2.bounds.y;
    return !((x1 > x2 + o2.bounds.w) || (y1 > y2 + o2.bounds.h) || (x1 + o1.bounds.w < x2) || (y1 + o1.bounds.h < y2));
  };

  Fz2D.swap = function(a, b) {
    var tmp;
    tmp = a;
    a = b;
    b = a;
    return [a, b];
  };

  Fz2D.toRGB = function(color) {
    var c;
    c = parseInt(color.slice(1), 16);
    return {
      r: ((c >> 16) & 255) / 255.0,
      g: ((c >> 8) & 255) / 255.0,
      b: (c & 255) / 255.0
    };
  };

  Fz2D.getEl = (function() {
    if (document.querySelector != null) {
      return function(selector) {
        return document.querySelector(selector);
      };
    } else {
      return function(selector) {
        return document.getElementById(selector.slice(1));
      };
    }
  })();

  Fz2D.createEl = function(type, attrs, styles) {
    var el, k, v;
    if (attrs == null) {
      attrs = {};
    }
    if (styles == null) {
      styles = {};
    }
    el = document.createElement(type);
    for (k in attrs) {
      v = attrs[k];
      el[k] = v;
    }
    for (k in styles) {
      v = styles[k];
      el.style[k] = v;
    }
    return el;
  };

  Fz2D.appendEl = function(el, parent) {
    if (parent == null) {
      parent = document.body;
    }
    parent.appendChild(el);
    return el;
  };

  Fz2D.setStyleEl = function(el, styles) {
    var k, v;
    if (styles == null) {
      styles = {};
    }
    for (k in styles) {
      v = styles[k];
      el.style[k] = v;
    }
    return el;
  };

  Fz2D.getJSON = function(url, callback) {
    var req;
    req = new XMLHttpRequest();
    req.open('GET', url, true);
    req.setRequestHeader('Content-type', 'application/json');
    req.onreadystatechange = function() {
      if (req.readyState === 4) {
        if (req.status === 200) {
          return callback(window.JSON.parse(req.responseText), req.status);
        } else {
          return callback(req.responseText, req.status);
        }
      }
    };
    return req.send(null);
  };

  Fz2D.Plugins = {};

  Fz2D.Plugin = (function() {
    function Plugin() {}

    Plugin.supported = true;

    return Plugin;

  })();

  Fz2D.Gui = {};

  return Fz2D;

})();

if ((typeof global !== "undefined" && global !== null) && typeof global === 'object') {
  Fz2D.__path = require('path');
  Fz2D.require = function(file) {
    return require(Fz2D.__path.join(__dirname, file));
  };
  global.Fz2D = Fz2D;
}

if (window.requestAnimationFrame == null) {
  window.requestAnimationFrame = (function(window) {
    return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })(window);
}

if (window.console == null) {
  window.console = (function(window) {
    return {
      log: function(text) {}
    };
  })(window);
}

if (window.localStorage == null) {
  window.localStorage = (function(window) {
    var LocalStorageImpl;
    LocalStorageImpl = (function() {
      function LocalStorageImpl() {
        this.data = {};
      }

      LocalStorageImpl.prototype.setItem = function(name, value) {
        return this.data[name] = data;
      };

      LocalStorageImpl.prototype.getItem = function(name) {
        return this.data[name];
      };

      LocalStorageImpl.prototype.removeItem = function(name) {
        return this.data[name] = null;
      };

      return LocalStorageImpl;

    })();
    return new LocalStorageImpl();
  })(window);
}

if (window.performance == null) {
  window.performance = {};
}

if (window.performance.memory == null) {
  window.performance.memory = {
    usedJSHeapSize: 0
  };
}

Fz2D.Input = (function() {
  function Input(element1, x, y) {
    this.element = element1;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    this.keys = new Fz2D.Input.Keyboard();
    this.mouse = new Fz2D.Input.Mouse(this.element, x, y);
    this.touch = new Fz2D.Input.Touch(this.element, x, y);
  }

  Input.prototype.update = function() {
    this.keys.update();
    this.mouse.update();
    return this.touch.update();
  };

  return Input;

})();

Fz2D.Input.Keyboard = (function() {
  function Keyboard() {
    this.update();
    if (window.event != null) {
      window.onkeydown = (function(_this) {
        return function(e) {
          return _this[e.which] = _this.pressed[e.which] = true;
        };
      })(this);
      window.onkeyup = (function(_this) {
        return function(e) {
          return _this[e.which] = _this.pressed[e.which] = false;
        };
      })(this);
    } else {
      window.onkeydown = (function(_this) {
        return function(e) {
          return _this[e.keyCode] = _this.pressed[e.keyCode] = true;
        };
      })(this);
      window.onkeyup = (function(_this) {
        return function(e) {
          return _this[e.keyCode] = _this.pressed[e.keyCode] = false;
        };
      })(this);
    }
  }

  Keyboard.prototype.update = function() {
    return this.pressed = {};
  };

  return Keyboard;

})();

Fz2D.Input.Keyboard.Key = (function() {
  var c, j, ref, ref1;

  function Key() {}

  Key.NONE = 0;

  for (c = j = ref = 'A'.charCodeAt(0), ref1 = 'Z'.charCodeAt(0); ref <= ref1 ? j <= ref1 : j >= ref1; c = ref <= ref1 ? ++j : --j) {
    Key[String.fromCharCode(c)] = c;
  }

  Key.ENTER = 13;

  Key.ESC = 27;

  Key.SPACE = 32;

  Key.LEFT = 37;

  Key.UP = 38;

  Key.RIGHT = 39;

  Key.DOWN = 40;

  return Key;

})();

Fz2D.Input.Mouse = (function() {
  function Mouse(element1, x3, y3) {
    this.element = element1;
    this.x = x3 != null ? x3 : 0;
    this.y = y3 != null ? y3 : 0;
    this.position = new Fz2D.Point(this.x, this.y);
    this.update();
    this.element.onmousedown = (function(_this) {
      return function(e) {
        _this[e.button] = _this.pressed[e.button] = true;
        _this.released[e.button] = false;
        return false;
      };
    })(this);
    this.element.onmouseup = (function(_this) {
      return function(e) {
        _this[e.button] = _this.pressed[e.button] = false;
        _this.released[e.button] = true;
        return false;
      };
    })(this);
    if ((Fz2D.firefox != null) && (Fz2D.touch == null)) {
      this.element.onmousemove = (function(_this) {
        return function(e) {
          if (e.layerX || e.layerX === 0) {
            _this.dx = e.layerX - _this.x;
            _this.dy = e.layerY - _this.y;
            _this.position.x = _this.x = e.layerX;
            return _this.position.y = _this.y = e.layerY;
          }
        };
      })(this);
    } else {
      this.element.onmousemove = (function(_this) {
        return function(e) {
          if (e.offsetX || e.offsetX === 0) {
            _this.dx = e.offsetX - _this.x;
            _this.dy = e.offsetY - _this.y;
            _this.position.x = _this.x = e.offsetX;
            return _this.position.y = _this.y = e.offsetY;
          }
        };
      })(this);
    }
    this.element.oncontextmenu = function(e) {
      e.preventDefault();
      return false;
    };
  }

  Mouse.prototype.show = function() {
    return this.element.style.cursor = 'hand';
  };

  Mouse.prototype.hide = function() {
    return this.element.style.cursor = 'none';
  };

  Mouse.prototype.update = function() {
    this.dx = this.dy = 0;
    this.pressed = {};
    return this.released = {};
  };

  return Mouse;

})();

Fz2D.Input.Mouse.Button = (function() {
  function Button() {}

  Button.LEFT = 0;

  Button.MIDDLE = 1;

  Button.RIGHT = 2;

  return Button;

})();

Fz2D.Input.Touch = (function() {
  function Touch(element1, x3, y3) {
    this.element = element1;
    this.x = x3 != null ? x3 : 0;
    this.y = y3 != null ? y3 : 0;
    this.position = new Fz2D.Point(this.x, this.y);
    this.collection = new Fz2D.Input.Touch.Collection(this.element.getBoundingClientRect());
    this.update();
    if (Fz2D.touch == null) {
      return;
    }
    if (window.PointerEvent != null) {
      this._setup_pointer();
    } else {
      this._setup();
    }
  }

  Touch.prototype.update = function() {
    this.dx = this.dy = 0;
    this.pressed = this.released = null;
    return this.collection.length = 0;
  };

  Touch.prototype._setup = function() {
    this.element.addEventListener('touchstart', (function(_this) {
      return function(e) {
        e.preventDefault();
        _this.element.onmousedown(_this._updateTouches(e));
        _this.pressed = true;
        _this.released = null;
        return false;
      };
    })(this));
    this.element.addEventListener('touchend', (function(_this) {
      return function(e) {
        _this.element.onmouseup(_this._updateTouches(e));
        _this.pressed = null;
        _this.released = true;
        return false;
      };
    })(this));
    this.element.addEventListener('touchcancel', (function(_this) {
      return function(e) {
        _this.element.onmouseup(_this._updateTouches(e));
        _this.pressed = null;
        _this.released = true;
        return false;
      };
    })(this));
    this.element.addEventListener('touchmove', (function(_this) {
      return function(e) {
        e.preventDefault();
        _this._updateTouches(e);
        return false;
      };
    })(this));
    this.element.addEventListener('selectstart', function(e) {
      e.preventDefault();
      return false;
    });
    this.element.addEventListener('contextmenu', function(e) {
      e.preventDefault();
      return false;
    });
    return this.element.addEventListener('MSHoldVisual', function(e) {
      e.preventDefault();
      return false;
    });
  };

  Touch.prototype._setup_pointer = function() {
    this.element.addEventListener('pointerdown', (function(_this) {
      return function(e) {
        _this.element.onmousedown(_this._updatePointerTouches(e));
        _this.pressed = true;
        _this.released = null;
        return false;
      };
    })(this));
    this.element.addEventListener('pointerup', (function(_this) {
      return function(e) {
        _this.element.onmouseup(_this._updatePointerTouches(e));
        _this.pressed = null;
        _this.released = true;
        return false;
      };
    })(this));
    this.element.addEventListener('pointerout', (function(_this) {
      return function(e) {
        _this.element.onmouseup(_this._updatePointerTouches(e));
        _this.pressed = null;
        _this.released = true;
        return false;
      };
    })(this));
    this.element.addEventListener('pointercancel', (function(_this) {
      return function(e) {
        _this.element.onmouseup(_this._updatePointerTouches(e));
        _this.pressed = null;
        _this.released = true;
        return false;
      };
    })(this));
    this.element.addEventListener('pointermove', (function(_this) {
      return function(e) {
        _this._updatePointerTouches(e);
        return false;
      };
    })(this));
    this.element.addEventListener('selectstart', function(e) {
      e.preventDefault();
      return false;
    });
    this.element.addEventListener('contextmenu', function(e) {
      e.preventDefault();
      return false;
    });
    return this.element.addEventListener('MSHoldVisual', function(e) {
      e.preventDefault();
      return false;
    });
  };

  Touch.prototype._updateTouches = function(e) {
    this.collection.setFromTouchList(e.changedTouches);
    return this._updateLastTouch(e);
  };

  Touch.prototype._updatePointerTouches = function(e) {
    this.collection.setFromPointer(e);
    return this._updateLastTouch(e);
  };

  Touch.prototype._updateLastTouch = function(e) {
    var touch;
    touch = this.collection.first();
    this.dx = touch.offsetX - this.x;
    this.dy = touch.offsetY - this.y;
    this.position.x = this.x = touch.offsetX;
    this.position.y = this.y = touch.offsetY;
    this.element.onmousemove(touch);
    return touch;
  };

  return Touch;

})();

Fz2D.Input.Touch.Collection = (function() {
  function Collection(bounds, n) {
    if (n == null) {
      n = 16;
    }
    this.x = bounds.left;
    this.y = bounds.top;
    this._reserve(n);
  }

  Collection.prototype.setFromPointer = function(pointer) {
    var item;
    item = this._items[0];
    item.id = pointer.pointerId;
    item.offsetX = pointer.clientX - this.x;
    item.offsetY = pointer.clientY - this.y;
    return this.length = 1;
  };

  Collection.prototype.setFromTouchList = function(touches) {
    var i, item, j, ref, touch;
    for (i = j = 0, ref = touches.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      touch = touches[i];
      item = this._items[i];
      item.id = touch.identifier;
      item.offsetX = touch.clientX - this.x;
      item.offsetY = touch.clientY - this.y;
    }
    return this.length = touches.length;
  };

  Collection.prototype.find = function(id) {
    var i, item, j, ref;
    if (this.length === 0) {
      return null;
    }
    for (i = j = 0, ref = this.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      item = this._items[i];
      if (item.id === id) {
        return item;
      }
    }
    return null;
  };

  Collection.prototype.first = function() {
    return this._items[0];
  };

  Collection.prototype.last = function() {
    return this._items[this.length - 1];
  };

  Collection.prototype.at = function(i) {
    return this._items[i];
  };

  Collection.prototype._reserve = function(n) {
    var i, j, ref;
    this._items = [];
    for (i = j = 0, ref = n - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      this._items[i] = {
        id: null,
        offsetX: 0,
        offsetY: 0,
        button: 0
      };
    }
    return this.length = 0;
  };

  return Collection;

})();

Fz2D.Loader = (function() {
  Loader.Loaders = {};

  function Loader(game) {
    var _loader, k, loader, ref;
    this.loaded = 0;
    this.total = 0;
    this.pct = 0;
    this.visible = this.alive = this.exists = true;
    this.w = 256;
    this.h = 24;
    this.x = (game.w - this.w) >> 1;
    this.y = (game.h - this.h) >> 1;
    this._outer = new Fz2D.Texture(game.fg, this.w, this.h);
    this._inner = new Fz2D.Texture(game.bg, this.w, this.h);
    this._files = {};
    this._loaders = {};
    ref = Fz2D.Loader.Loaders;
    for (k in ref) {
      loader = ref[k];
      _loader = new loader(game.path);
      _loader.onload = (function(_this) {
        return function() {
          if (++_this.loaded >= _this.total) {
            _this.onload();
          }
          if (_this.pct > 0) {
            return console.log("Loaded: " + (Math.ceil(_this.pct * 100)) + "%");
          }
        };
      })(this);
      console.log("Registered loader " + k + " for the `" + _loader.extension + "` extension.");
      this._loaders[_loader.extension] = _loader;
    }
  }

  Loader.prototype.onload = function() {};

  Loader.prototype.load = function(path) {
    var extension, loader;
    if (this._files[path] != null) {
      return this._files[path];
    }
    extension = path.split('.').pop();
    if (extension != null) {
      loader = this._loaders[extension];
      if (loader != null) {
        this.total++;
        return this._files[path] = loader.load(path);
      } else {
        console.log("No loader registered for this `" + extension + "` extension. Sorry :(");
        return null;
      }
    } else {
      console.log("Ignoring `" + path + "` because it has no extension. :(");
      return null;
    }
  };

  Loader.prototype.draw = function(ctx) {
    ctx.draw(this._outer, 0, 0, this.w, this.h, this.x, this.y, this.w, this.h);
    ctx.draw(this._inner, 0, 0, this.w - 4, this.h - 4, this.x + 2, this.y + 2, this.w - 4, this.h - 4);
    return ctx.draw(this._outer, 0, 0, this.w - 12, this.h - 12, this.x + 6, this.y + 6, this.pct * (this.w - 12), this.h - 12);
  };

  Loader.prototype.update = function(timer, input) {
    return this.pct = this.loaded / this.total;
  };

  Loader.prototype.isLoading = function() {
    return this.loaded < this.total;
  };

  return Loader;

})();

Fz2D.Loader.Base = (function() {
  Base.prototype.extension = null;

  Base.prototype.path = null;

  function Base(path) {
    this._path = path + "/" + this.path;
  }

  Base.prototype.expand = function(path, extension) {
    if (extension == null) {
      extension = null;
    }
    if (extension != null) {
      return this._path + "/" + (path.slice(0, path.length - this.extension.length)) + extension;
    } else {
      return this._path + "/" + path;
    }
  };

  Base.prototype.load = function(path) {
    throw 'load() must be implemented by each loader, and must call onload(asset)';
  };

  Base.prototype.onload = function(asset) {};

  return Base;

})();

Fz2D.Loader.Loaders.Audio = (function(superClass) {
  extend(Audio, superClass);

  function Audio() {
    return Audio.__super__.constructor.apply(this, arguments);
  }

  Audio.prototype.extension = 'ogg';

  Audio.prototype.path = 'sounds';

  Audio.prototype.load = function(path) {
    var audio;
    audio = new Fz2D.Audio();
    if (Fz2D.Audio.supported != null) {
      audio.onload = (function(_this) {
        return function() {
          return _this.onload(audio);
        };
      })(this);
      audio.load(this.expand(path, Fz2D.Audio.extension));
    } else {
      this.onload(audio);
    }
    return audio;
  };

  return Audio;

})(Fz2D.Loader.Base);

Fz2D.Loader.Loaders.JSON = (function(superClass) {
  extend(JSON, superClass);

  function JSON() {
    return JSON.__super__.constructor.apply(this, arguments);
  }

  JSON.prototype.extension = 'json';

  JSON.prototype.path = 'json';

  JSON.prototype.load = function(path) {
    var expanded_path, json;
    expanded_path = this.expand(path);
    json = {};
    Fz2D.getJSON(expanded_path, (function(_this) {
      return function(resp, code) {
        var k, v;
        if (code === 200) {
          console.log("Loaded json: " + Fz2D.url + expanded_path);
          for (k in resp) {
            v = resp[k];
            json[k] = v;
          }
        } else {
          console.log("Failed to load json: " + Fz2D.url + expanded_path);
        }
        return _this.onload(json);
      };
    })(this));
    return json;
  };

  return JSON;

})(Fz2D.Loader.Base);

Fz2D.Loader.Loaders.Texture = (function(superClass) {
  extend(Texture, superClass);

  function Texture() {
    return Texture.__super__.constructor.apply(this, arguments);
  }

  Texture.prototype.extension = 'png';

  Texture.prototype.path = 'textures';

  Texture.prototype.load = function(path) {
    var texture;
    texture = new Fz2D.Texture();
    texture.onload = (function(_this) {
      return function() {
        return _this.onload(texture);
      };
    })(this);
    texture.load(this.expand(path));
    return texture;
  };

  return Texture;

})(Fz2D.Loader.Base);

Fz2D.Loader.Loaders.TextureAtlas = (function(superClass) {
  extend(TextureAtlas, superClass);

  TextureAtlas.prototype.extension = 'atlas';

  TextureAtlas.prototype.path = 'json';

  function TextureAtlas(path) {
    TextureAtlas.__super__.constructor.apply(this, arguments);
    this._texture_atlases = {};
    this._texture_loader = new Fz2D.Loader.Loaders.Texture(path);
    this._texture_loader.onload = (function(_this) {
      return function(texture) {
        var k, ref, texture_atlas, v;
        texture_atlas = _this._texture_atlases[texture.src];
        if ((texture_atlas != null) && (texture_atlas.__regions != null)) {
          texture_atlas.setTexture(texture);
          ref = texture_atlas.__regions;
          for (k in ref) {
            v = ref[k];
            texture_atlas.addTexture(k, v.x, v.y, v.w, v.h);
          }
          delete texture_atlas['__regions'];
          delete _this._texture_atlases[texture.src];
        }
        return _this.onload();
      };
    })(this);
  }

  TextureAtlas.prototype.load = function(path) {
    var expanded_path, texture_atlas;
    expanded_path = this.expand(path);
    texture_atlas = new Fz2D.TextureAtlas();
    Fz2D.getJSON(expanded_path, (function(_this) {
      return function(resp, code) {
        if (code === 200) {
          if ((resp.src != null) && (resp.regions != null)) {
            console.log("Loaded texture atlas: " + Fz2D.url + expanded_path);
            texture_atlas.__regions = resp.regions;
            _this._texture_atlases[_this._texture_loader.expand(resp.src)] = texture_atlas;
            return _this._texture_loader.load(resp.src);
          } else {
            console.log("Invalid texture atlas: " + Fz2D.url + expanded_path);
            return _this.onload();
          }
        } else {
          console.log("Failed to load texture atlas: " + Fz2D.url + expanded_path);
          return _this.onload();
        }
      };
    })(this));
    return texture_atlas;
  };

  return TextureAtlas;

})(Fz2D.Loader.Base);

Fz2D.Plugins.Branding = (function(superClass) {
  extend(Branding, superClass);

  function Branding(game) {
    var base, base1, base2;
    if (game.branding == null) {
      return;
    }
    if (game.assets == null) {
      game.assets = {};
    }
    if ((base = game.assets).plugins == null) {
      base.plugins = {};
    }
    game.assets.plugins.branding = game.branding.logo;
    if ((base1 = game.branding).position == null) {
      base1.position = 'bottom-right';
    }
    if ((base2 = game.branding).border == null) {
      base2.border = 5;
    }
  }

  Branding.prototype.onload = function(game) {
    if (game.branding == null) {
      return;
    }
    this.logo = game.assets.plugins.branding;
    this.w = this.logo.w;
    this.h = this.logo.h;
    switch (game.branding.position) {
      case 'top-left':
        this.x = game.branding.border;
        return this.y = game.branding.border;
      case 'top-right':
        this.x = game.w - this.w - game.branding.border;
        return this.y = game.branding.border;
      case 'bottom-left':
        this.x = game.branding.border;
        return this.y = game.h - this.h - game.branding.border;
      case 'bottom-right':
        this.x = game.w - this.w - game.branding.border;
        return this.y = game.h - this.h - game.branding.border;
    }
  };

  Branding.prototype.draw = function(ctx) {
    if (this.logo == null) {
      return;
    }
    return ctx.draw(this.logo, 0, 0, this.w, this.h, this.x, this.y, this.w, this.h);
  };

  return Branding;

})(Fz2D.Plugin);

Fz2D.Plugins.Console = (function(superClass) {
  extend(Console, superClass);

  Console.supported = Fz2D.debug;

  Console.prototype.styles = {
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    width: window.innerWidth - 60,
    height: '100px',
    padding: '8px',
    position: 'absolute',
    bottom: 0,
    right: 0,
    margin: '20px',
    border: '2px solid #B00000',
    font: '18px Arial',
    color: '#B00000',
    overflow: 'auto',
    zIndex: 999
  };

  function Console(game) {
    this._div = Fz2D.createEl('div', {}, this.styles);
    Fz2D.appendEl(this._div);
    if (window.console == null) {
      window.console = {};
    }
    window.console.log = (function(_this) {
      return function() {
        var arg, div, j, len, text;
        text = [];
        for (j = 0, len = arguments.length; j < len; j++) {
          arg = arguments[j];
          if (typeof arg === 'object') {
            text.push(JSON.stringify(arg, null, ' '));
          } else {
            text.push(arg);
          }
        }
        div = Fz2D.createEl('div');
        div.innerHTML = text.join(' ');
        _this._div.appendChild(div);
        return _this._div.scrollTop = _this._div.scrollHeight;
      };
    })(this);
  }

  return Console;

})(Fz2D.Plugin);

Fz2D.Plugins.GitHub = (function(superClass) {
  extend(GitHub, superClass);

  GitHub.supported = Fz2D.production || Fz2D.github;

  GitHub.prototype.colors = {
    'red': 'aa0000',
    'green': '007200',
    'darkblue': '126121',
    'orange': 'ff7600',
    'gray': '6d6d6d',
    'white': 'ffffff'
  };

  GitHub.prototype.positions = ['left', 'right'];

  function GitHub(game) {
    var config, ref;
    if (game.github == null) {
      return;
    }
    config = game.github;
    if (!(config.color in this.colors)) {
      config.color = 'red';
    }
    if (ref = config.position, indexOf.call(this.positions, ref) < 0) {
      config.position = 'right';
    }
    this._createRibbon(config.username, config.repository, config.color, config.position);
  }

  GitHub.prototype._createRibbon = function(username, repository, color, position) {
    var a, image;
    a = Fz2D.createEl('a', {
      href: "https://github.com/" + username + "/" + repository,
      target: '_blank'
    });
    image = new Image();
    image.alt = 'Fork me on GitHub';
    image.src = "https://s3.amazonaws.com/github/ribbons/forkme_" + position + "_" + color + "_" + this.colors[color] + ".png";
    Fz2D.setStyleEl(image, {
      position: 'absolute',
      top: 0,
      border: 0,
      zIndex: 999
    });
    if (position === 'left') {
      Fz2D.setStyleEl(image, {
        left: 0
      });
    } else {
      Fz2D.setStyleEl(image, {
        right: 0
      });
    }
    Fz2D.appendEl(image, a);
    Fz2D.appendEl(a);
    return a;
  };

  return GitHub;

})(Fz2D.Plugin);

Fz2D.Plugins.GoogleAnalytics = (function(superClass) {
  extend(GoogleAnalytics, superClass);

  GoogleAnalytics.supported = Fz2D.production;

  GoogleAnalytics.track = function(id, event) {
    var ga, script;
    if (event == null) {
      event = ['_trackPageview'];
    }
    if (window._gaq) {
      window._gaq.push(event);
      return;
    }
    window._gaq = [];
    window._gaq.push(['_setAccount', id]);
    window._gaq.push(event);
    ga = Fz2D.createEl('script', {
      type: 'text/javascript',
      async: true
    });
    if (Fz2D.https != null) {
      ga.src = 'https://ssl.google-analytics.com/ga.js';
    } else {
      ga.src = 'http://www.google-analytics.com/ga.js';
    }
    script = document.getElementsByTagName('script')[0];
    return script.parentNode.insertBefore(ga, script);
  };

  function GoogleAnalytics(game) {
    if ((game.ga != null) && (game.ga.id != null)) {
      Fz2D.Plugins.GoogleAnalytics.track(game.ga.id, game.ga.event);
    }
  }

  return GoogleAnalytics;

})(Fz2D.Plugin);

Fz2D.Plugins.RemoteConsole = (function(superClass) {
  extend(RemoteConsole, superClass);

  RemoteConsole.supported = Fz2D.debug;

  function RemoteConsole(game) {
    this._setup_after = bind(this._setup_after, this);
    this._setup_before();
    document.addEventListener('io', this._setup_after);
  }

  RemoteConsole.prototype._setup_before = function() {
    this._args = [];
    this._log = window.console.log;
    return window.console.log = (function(_this) {
      return function() {
        return _this._args.push(arguments);
      };
    })(this);
  };

  RemoteConsole.prototype._setup_after = function() {
    var args, j, len, ref, results;
    window.console.log = (function(_this) {
      return function() {
        var arg, args, j, len;
        _this._log.apply(window.console, arguments);
        args = [];
        for (j = 0, len = arguments.length; j < len; j++) {
          arg = arguments[j];
          if (typeof arg === 'object') {
            args.push(JSON.stringify(arg, null, ' '));
          } else {
            args.push(arg);
          }
        }
        return _this.socket.emit('log', {
          args: args
        });
      };
    })(this);
    this.socket = window.io.connect(window.location.url);
    ref = this._args;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      args = ref[j];
      results.push(window.console.log.apply(window.console, args));
    }
    return results;
  };

  return RemoteConsole;

})(Fz2D.Plugin);

Fz2D.Plugins.Stats = (function(superClass) {
  extend(Stats, superClass);

  Stats.supported = Fz2D.stats;

  Stats.prototype.styles = {
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    padding: '8px',
    position: 'absolute',
    left: 0,
    top: 0,
    margin: '20px',
    border: '2px solid #B00000',
    font: '28px Arial',
    color: '#B00000',
    zIndex: 999
  };

  function Stats(game) {
    this._game = game;
    this._div = Fz2D.createEl('div', {}, this.styles);
    Fz2D.appendEl(this._div);
    this._dt = 1111;
  }

  Stats.prototype.update = function(timer, input) {
    if (this._dt > 1000) {
      this._div.innerHTML = "FPS: " + timer.fps + " <br/> CTX: " + Fz2D.Renderer.supported + " <br/> DRW: " + this._game.draw_call_count + " <br/> AO: " + Fz2D.Audio.supported;
      return this._dt = 0;
    } else {
      return this._dt += timer.dt;
    }
  };

  return Stats;

})(Fz2D.Plugin);

Fz2D.Plugins.Touch = (function(superClass) {
  var Key;

  extend(Touch, superClass);

  Key = Fz2D.Input.Keyboard.Key;

  Touch.supported = Fz2D.touch;

  Touch.prototype.config = {
    left: {
      type: 'joystick',
      radius: 50,
      keys: {
        right: Key.RIGHT,
        left: Key.LEFT
      }
    },
    right: {
      type: 'button',
      radius: 50,
      keys: {
        up: Key.UP
      }
    }
  };

  function Touch(game) {
    var left, right;
    console.log('Touch Plugin enabled ...');
    this._controls = [];
    if (game.touch == null) {
      game.touch = this.config;
    }
    if (left = game.touch.left) {
      if (left.radius == null) {
        left.radius = 50;
      }
      left.left = true;
      this._controls.push(this._create_control(game.w, game.h, left));
    }
    if (right = game.touch.right) {
      if (right.radius == null) {
        right.radius = 50;
      }
      this._controls.push(this._create_control(game.w, game.h, right));
    }
  }

  Touch.prototype.update = function(timer, input) {
    var control, j, len, ref, results;
    ref = this._controls;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      control = ref[j];
      results.push(control.update(timer, input));
    }
    return results;
  };

  Touch.prototype.draw = function(ctx) {
    var control, j, len, ref, results;
    ref = this._controls;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      control = ref[j];
      results.push(control.draw(ctx));
    }
    return results;
  };

  Touch.prototype._create_control = function(w, h, config) {
    switch (config.type) {
      case 'joystick':
        return new Fz2D.Plugins.Touch.TouchControlJoystick(w, h, config);
      case 'button':
        return new Fz2D.Plugins.Touch.TouchControlJoystickButton(w, h, config);
      default:
        throw 'Invalid touch control configuration type';
    }
  };

  return Touch;

})(Fz2D.Plugin);

Fz2D.Plugins.Touch.TouchControl = (function() {
  function TouchControl(w, h, config) {
    this._keys = config.keys || {};
    this._radius = config.radius || 50;
    this._radius2 = this._radius * this._radius;
    this._outer_size = this._radius * 2;
    this._inner_size = this._outer_size - 20;
    this._outer = new Fz2D.Texture("rgba(224, 224, 224, 0.2):circle", this._outer_size, this._outer_size);
    this._inner = new Fz2D.Texture("rgba(224, 224, 224, 0.4):circle", this._inner_size, this._inner_size);
    if (config.left != null) {
      this._outer_x = 20;
      this._inner_x = 30;
    } else {
      this._outer_x = w - this._outer_size - 20;
      this._inner_x = w - this._outer_size - 10;
    }
    this._outer_y = h - this._outer_size - 20;
    this._inner_y = h - this._outer_size - 10;
    this.cx = this._outer_x + this._radius;
    this.cy = this._outer_y + this._radius;
    this.dx = 0;
    this.dy = 0;
    this.id = null;
  }

  TouchControl.prototype.pressed = function(touch, input) {};

  TouchControl.prototype.moved = function(touch, input) {};

  TouchControl.prototype.released = function(touch, input) {
    var k, ref, v;
    ref = this._keys;
    for (k in ref) {
      v = ref[k];
      input.keys[v] = input.keys.pressed[v] = false;
    }
    return null;
  };

  TouchControl.prototype.update = function(timer, input) {
    var dx, dy, touch;
    if (this.id != null) {
      touch = input.touch.collection.find(this.id);
      if (touch == null) {
        return;
      }
      this.dx = 0;
      this.dy = 0;
      if (input.touch.released != null) {
        this.id = null;
        return this.released(touch, input);
      } else {
        return this.moved(touch, input);
      }
    } else if (input.touch.pressed != null) {
      touch = input.touch.collection.first();
      dx = touch.offsetX - this.cx;
      dy = touch.offsetY - this.cy;
      if (dx * dx + dy * dy < 50 * 50) {
        this.id = touch.id;
        this.dx = 0;
        this.dy = 0;
        return this.pressed(touch, input);
      }
    }
  };

  TouchControl.prototype.draw = function(ctx) {
    ctx.draw(this._outer, 0, 0, this._outer.w, this._outer.h, this._outer_x, this._outer_y, this._outer_size, this._outer_size);
    return ctx.draw(this._inner, 0, 0, this._inner.w, this._inner.h, this.dx + this._inner_x, this.dy + this._inner_y, this._inner_size, this._inner_size);
  };

  return TouchControl;

})();

Fz2D.Plugins.Touch.TouchControlJoystick = (function(superClass) {
  extend(TouchControlJoystick, superClass);

  function TouchControlJoystick() {
    return TouchControlJoystick.__super__.constructor.apply(this, arguments);
  }

  TouchControlJoystick.prototype.moved = function(touch, input) {
    var dir, dx, dy;
    if ((this._keys.left != null) && (this._keys.right != null)) {
      dx = touch.offsetX - this.cx;
      dir = dx / 50;
      if (dir < 0) {
        this.dx = -10;
        input.keys[this._keys.left] = input.keys.pressed[this._keys.left] = true;
        input.keys[this._keys.right] = input.keys.pressed[this._keys.right] = false;
      } else if (dir > 0) {
        this.dx = 10;
        input.keys[this._keys.left] = input.keys.pressed[this._keys.left] = false;
        input.keys[this._keys.right] = input.keys.pressed[this._keys.right] = true;
      } else {
        this.dx = 0;
      }
    }
    if ((this._keys.up != null) && (this._keys.down != null)) {
      dy = touch.offsetY - this.cy;
      dir = dy / 50;
      if (dir < 0) {
        this.dy = -10;
        input.keys[this._keys.up] = input.keys.pressed[this._keys.up] = true;
        input.keys[this._keys.down] = input.keys.pressed[this._keys.down] = false;
      } else if (dir > 0) {
        this.dy = 10;
        input.keys[this._keys.up] = input.keys.pressed[this._keys.up] = false;
        input.keys[this._keys.down] = input.keys.pressed[this._keys.down] = true;
      } else {
        this.dy = 0;
      }
    }
    return null;
  };

  return TouchControlJoystick;

})(Fz2D.Plugins.Touch.TouchControl);

Fz2D.Plugins.Touch.TouchControlJoystickButton = (function(superClass) {
  extend(TouchControlJoystickButton, superClass);

  function TouchControlJoystickButton() {
    return TouchControlJoystickButton.__super__.constructor.apply(this, arguments);
  }

  TouchControlJoystickButton.prototype.pressed = function(touch, input) {
    var k, ref, v;
    this.dy = 10;
    ref = this._keys;
    for (k in ref) {
      v = ref[k];
      input.keys[v] = input.keys.pressed[v] = true;
    }
    return null;
  };

  return TouchControlJoystickButton;

})(Fz2D.Plugins.Touch.TouchControl);

Fz2D.Canvas = (function() {
  Canvas.supported = (function() {
    try {
      if (window.CanvasRenderingContext2D && Fz2D.createEl('canvas').getContext('2d')) {
        return '2d';
      } else {
        return null;
      }
    } catch (_error) {
      return null;
    }
  })();

  Canvas.opts = {};

  Canvas.getContext = function(w, h, color, selector, type, opts) {
    var canvas, ctx;
    if (color == null) {
      color = null;
    }
    if (selector == null) {
      selector = null;
    }
    if (type == null) {
      type = this.supported;
    }
    if (opts == null) {
      opts = this.opts;
    }
    if (selector != null) {
      canvas = Fz2D.getEl(selector) || Fz2D.createEl('canvas');
    } else {
      canvas = Fz2D.createEl('canvas');
    }
    canvas.width = w;
    canvas.height = h;
    if (color != null) {
      canvas.style.backgroundColor = color;
    }
    if (selector != null) {
      canvas.id = selector.slice(1);
      canvas.style.position = 'relative';
      canvas.style.touchAction = 'none';
      Fz2D.appendEl(canvas);
    }
    ctx = canvas.getContext(type, opts);
    if (ctx != null) {
      ctx.mozImageSmoothingEnabled = false;
      ctx.webkitImageSmoothingEnabled = false;
      ctx.imageSmoothingEnabled = false;
    }
    return ctx;
  };

  Canvas.createImage = function(w, h, color) {
    var ctx, radius, ref, type;
    ctx = Fz2D.Canvas.getContext(w, h);
    ref = color.split(':'), color = ref[0], type = ref[1], radius = ref[2];
    ctx.fillStyle = color;
    if (type === 'circle') {
      if (radius == null) {
        radius = w / 2.0;
      }
      ctx.beginPath();
      ctx.arc(radius, radius, radius, 0, 2 * Math.PI, false);
      ctx.fill();
    } else {
      ctx.fillRect(0, 0, w, h);
    }
    return ctx.canvas;
  };

  function Canvas(w1, h1, color1, selector1) {
    this.w = w1;
    this.h = h1;
    this.color = color1 != null ? color1 : null;
    this.selector = selector1 != null ? selector1 : null;
    this._ctx = Fz2D.Renderer.getContext(this.w, this.h, this.color, this.selector);
    this.bounds = new Fz2D.Rect(0, 0, this.w, this.h);
    this.draw_call_count = 0;
  }

  Canvas.prototype.fill = function(color) {
    this._ctx.fillStyle = color;
    this._ctx.fillRect(0, 0, this.w, this.h);
    return this._ctx;
  };

  Canvas.prototype.clear = function() {
    this.draw_call_count = 0;
    this._ctx.clearRect(0, 0, this.w, this.h);
    return this._ctx;
  };

  Canvas.prototype.flush = function() {};

  Canvas.prototype.draw = function(texture, sx, sy, sw, sh, x, y, w, h) {
    this.draw_call_count++;
    this._ctx.drawImage(texture._native, sx, sy, sw, sh, x, y, w, h);
    return this._ctx;
  };

  Canvas.prototype.toImage = function() {
    return this._ctx.canvas;
  };

  Canvas.prototype.toElement = function() {
    return this._ctx.canvas;
  };

  return Canvas;

})();

Fz2D.CanvasWebGL = (function(superClass) {
  extend(CanvasWebGL, superClass);

  CanvasWebGL.supported = (function() {
    var canvas;
    try {
      if (window.WebGLRenderingContext) {
        canvas = Fz2D.createEl('canvas');
        if (canvas.getContext('webgl')) {
          return 'webgl';
        } else if (canvas.getContext('experimental-webgl')) {
          return 'experimental-webgl';
        } else {
          return null;
        }
      } else {
        return null;
      }
    } catch (_error) {
      return null;
    }
  })();

  CanvasWebGL.VERTEX_CACHE_MAX_SIZE = 24 * 2048;

  CanvasWebGL.VERTEX_SHADER = "precision highp float;\n\nuniform vec2 screen;\nuniform vec2 texture;\n\nattribute vec4 pos;\nvarying vec2 texture_coord;\n\nvoid main(void)\n{ \n  texture_coord = pos.zw * texture;\n  vec2 new_pos = pos.xy * screen;\n  gl_Position = vec4(new_pos.x - 1.0, 1.0 - new_pos.y, 0.0, 1.0);\n}";

  CanvasWebGL.FRAGMENT_SHADER = "precision highp float;\n\nuniform sampler2D texture_id;\nvarying vec2 texture_coord;\n  \nvoid main(void)\n{\n  gl_FragColor = texture2D(texture_id, texture_coord);\n}";

  function CanvasWebGL() {
    CanvasWebGL.__super__.constructor.apply(this, arguments);
    this.gl = this._ctx;
    this._texture_id = 0;
    this.gl.disable(this.gl.DEPTH_TEST);
    this.gl.disable(this.gl.CULL_FACE);
    this.gl.enable(this.gl.BLEND);
    this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);
    this._program = this._createShaderProgram(Fz2D.CanvasWebGL.VERTEX_SHADER, Fz2D.CanvasWebGL.FRAGMENT_SHADER);
    this._pos_uv_loc = this.gl.getAttribLocation(this._program, "pos");
    this._texture_id_loc = this.gl.getUniformLocation(this._program, "texture_id");
    this._texture_loc = this.gl.getUniformLocation(this._program, "texture");
    this._screen_loc = this.gl.getUniformLocation(this._program, "screen");
    this.gl.uniform1i(this._texture_id_loc, 0);
    this.gl.uniform2f(this._screen_loc, 2.0 / this.bounds.w, 2.0 / this.bounds.h);
    this._buffer = this.gl.createBuffer();
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._buffer);
    this._vertex_cache = new Float32Array(Fz2D.CanvasWebGL.VERTEX_CACHE_MAX_SIZE);
    this._vertex_cache_size = 0;
    this.gl.bufferData(this.gl.ARRAY_BUFFER, this._vertex_cache, this.gl.DYNAMIC_DRAW);
  }

  CanvasWebGL.prototype.fill = function(color) {
    var c;
    c = Fz2D.toRGB(color);
    return this.gl.clearColor(c.r, c.g, c.b, 1.0);
  };

  CanvasWebGL.prototype.clear = function() {
    this.draw_call_count = 0;
    return this.gl.clear(this.gl.COLOR_BUFFER_BIT);
  };

  CanvasWebGL.prototype.flush = function() {
    if (this._vertex_cache_size === 0) {
      return;
    }
    this.draw_call_count++;
    this.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, this._vertex_cache);
    this.gl.enableVertexAttribArray(this._pos_uv_loc);
    this.gl.vertexAttribPointer(this._pos_uv_loc, 4, this.gl.FLOAT, false, 16, 0);
    this.gl.drawArrays(this.gl.TRIANGLES, 0, this._vertex_cache_size >> 2);
    return this._vertex_cache_size = 0;
  };

  CanvasWebGL.prototype.draw = function(texture, sx, sy, sw, sh, x, y, w, h) {
    var b, r, sb, sr;
    if (texture._native._texture_id !== this._texture_id) {
      this.flush();
      if (texture._native._texture_id) {
        this.gl.bindTexture(this.gl.TEXTURE_2D, texture._native._texture_id);
      } else {
        texture._native._texture_id = this._createTexture(texture._native);
      }
      this._texture_id = texture._native._texture_id;
      this.gl.uniform2f(this._texture_loc, texture.iw, texture.ih);
    }
    r = x + w;
    b = y + h;
    sr = sx + sw;
    sb = sy + sh;
    this._vertex_cache[this._vertex_cache_size++] = x;
    this._vertex_cache[this._vertex_cache_size++] = y;
    this._vertex_cache[this._vertex_cache_size++] = sx;
    this._vertex_cache[this._vertex_cache_size++] = sy;
    this._vertex_cache[this._vertex_cache_size++] = r;
    this._vertex_cache[this._vertex_cache_size++] = y;
    this._vertex_cache[this._vertex_cache_size++] = sr;
    this._vertex_cache[this._vertex_cache_size++] = sy;
    this._vertex_cache[this._vertex_cache_size++] = x;
    this._vertex_cache[this._vertex_cache_size++] = b;
    this._vertex_cache[this._vertex_cache_size++] = sx;
    this._vertex_cache[this._vertex_cache_size++] = sb;
    this._vertex_cache[this._vertex_cache_size++] = x;
    this._vertex_cache[this._vertex_cache_size++] = b;
    this._vertex_cache[this._vertex_cache_size++] = sx;
    this._vertex_cache[this._vertex_cache_size++] = sb;
    this._vertex_cache[this._vertex_cache_size++] = r;
    this._vertex_cache[this._vertex_cache_size++] = y;
    this._vertex_cache[this._vertex_cache_size++] = sr;
    this._vertex_cache[this._vertex_cache_size++] = sy;
    this._vertex_cache[this._vertex_cache_size++] = r;
    this._vertex_cache[this._vertex_cache_size++] = b;
    this._vertex_cache[this._vertex_cache_size++] = sr;
    this._vertex_cache[this._vertex_cache_size++] = sb;
    if (this._vertex_cache_size === Fz2D.CanvasWebGL.VERTEX_CACHE_MAX_SIZE) {
      return this.flush();
    }
  };

  CanvasWebGL.prototype._createShader = function(source, type) {
    var shader;
    shader = this.gl.createShader(type);
    this.gl.shaderSource(shader, source);
    this.gl.compileShader(shader);
    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
      console.log(this.gl.getShaderInfoLog(shader));
      throw "Failed to compile shader :(";
    }
    return shader;
  };

  CanvasWebGL.prototype._createShaderProgram = function(vertex, fragment) {
    var fs, program, vs;
    program = this.gl.createProgram();
    vs = this._createShader(vertex, this.gl.VERTEX_SHADER);
    fs = this._createShader(fragment, this.gl.FRAGMENT_SHADER);
    this.gl.attachShader(program, vs);
    this.gl.attachShader(program, fs);
    this.gl.linkProgram(program);
    if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {
      console.log(this.gl.glGetProgramInfoLog(program));
      throw "Failed to link shader program :(";
    }
    this.gl.useProgram(program);
    return program;
  };

  CanvasWebGL.prototype._createTexture = function(image) {
    var texture_id;
    texture_id = this.gl.createTexture();
    this.gl.bindTexture(this.gl.TEXTURE_2D, texture_id);
    this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, image);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
    return texture_id;
  };

  return CanvasWebGL;

})(Fz2D.Canvas);

Fz2D.Renderer = (function(Fz2D) {
  if (Fz2D.Canvas.supported != null) {
    if (Fz2D.nowebgl != null) {
      console.log('Renderer: 2D (forced)');
      return Fz2D.Canvas;
    } else if (Fz2D.CanvasWebGL.supported != null) {
      console.log('Renderer: WebGL');
      return Fz2D.CanvasWebGL;
    } else {
      console.log('Renderer: 2D');
      return Fz2D.Canvas;
    }
  } else {
    return null;
  }
})(Fz2D);

Fz2D.Texture = (function() {
  Texture.prototype.src = null;

  function Texture(image, x, y, w, h) {
    if (image == null) {
      image = null;
    }
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (w == null) {
      w = null;
    }
    if (h == null) {
      h = null;
    }
    if (image != null) {
      if (image instanceof Fz2D.Texture) {
        this._native = image._native;
        if (image.texture_id != null) {
          this.texture_id = image.texture_id;
        }
        this.x = image.x + x;
        this.y = image.y + y;
        this.w = w || image.w;
        this.h = h || image.h;
        this.iw = image.iw;
        this.ih = image.ih;
        return;
      } else if (typeof image === 'string') {
        w = x;
        x = 0;
        h = y;
        y = 0;
        image = Fz2D.Renderer.createImage(w, h, image);
      }
      this._native = image;
      this.x = x;
      this.y = y;
      this.w = w || image.width;
      this.h = h || image.height;
      this.iw = 1.0 / this.w;
      this.ih = 1.0 / this.h;
      return;
    }
    this.x = x;
    this.y = y;
    this.w = w || 0;
    this.h = h || 0;
    if (this.w > 0) {
      this.iw = 1.0 / this.w;
    } else {
      this.iw = 0.0;
    }
    if (this.h > 0) {
      this.ih = 1.0 / this.h;
    } else {
      this.ih = 0.0;
    }
    this._native = new window.Image();
    this._native.onload = (function(_this) {
      return function() {
        console.log("Loaded image: " + _this._native.src);
        if (_this.w === 0) {
          _this.w = _this._native.width;
          _this.iw = 1.0 / _this._native.width;
        }
        if (_this.h === 0) {
          _this.h = _this._native.height;
          _this.ih = 1.0 / _this._native.height;
        }
        return _this.onload(_this);
      };
    })(this);
    this._native.onerror = (function(_this) {
      return function() {
        console.log("Failed to load image: " + _this._native.src);
        return _this.onload(_this);
      };
    })(this);
  }

  Texture.prototype.onload = function(texture) {};

  Texture.prototype.load = function(path) {
    this.src = path;
    this._native.src = path;
    return this;
  };

  Texture.prototype.getSubTexture = function(x, y, w, h) {
    var i, ww;
    switch (arguments.length) {
      case 1:
        if (this.w % this.h === 0) {
          x = x * this.h;
          y = 0;
          h = this.h;
          w = this.h;
        } else {
          x = 0;
          y = 0;
          w = this.w;
          h = this.h;
        }
        break;
      case 2:
        w = y;
        h = y;
        i = x;
        ww = this.w / y;
        x = ((i % ww) | 0) * h;
        y = ((i / ww) | 0) * h;
        break;
      default:
        if (x == null) {
          x = 0;
        }
        if (y == null) {
          y = 0;
        }
        if (h == null) {
          h = this.h;
        }
        if (w == null) {
          if (this.w % h === 0) {
            w = h;
          } else {
            w = this.w;
          }
        }
    }
    return new Fz2D.Texture(this, x, y, w, h);
  };

  Texture.prototype.clone = function() {
    return new Fz2D.Texture(this);
  };

  Texture.prototype.toImage = function() {
    return this._native;
  };

  return Texture;

})();

Fz2D.TextureAtlas = (function() {
  function TextureAtlas(texture1) {
    this.texture = texture1 != null ? texture1 : null;
    this.textures = {};
  }

  TextureAtlas.prototype.setTexture = function(texture) {
    return this.texture = texture;
  };

  TextureAtlas.prototype.addTexture = function(tag, x, y, w, h) {
    return this.textures[tag] = new Fz2D.Texture(this.texture, x, y, w, h);
  };

  TextureAtlas.prototype.getTexture = function(tag) {
    return this.textures[tag];
  };

  return TextureAtlas;

})();

Fz2D.TextureMosaic = (function(superClass) {
  extend(TextureMosaic, superClass);

  function TextureMosaic(w, h, tw, alpha) {
    var buffer, ctx, i, image_data, j, l, ref, ref1, ref2, ref3, twl, u, x, xx, y, yy, z;
    ctx = Fz2D.Renderer.getContext(w, h, null, null, '2d');
    image_data = ctx.getImageData(0, 0, tw, tw);
    buffer = image_data.data;
    twl = tw - 1;
    buffer._set = function(x, y, r, g, b, a) {
      var i;
      i = (x << 2) + ((y << 2) * tw);
      buffer[i + 0] = r;
      buffer[i + 1] = g;
      buffer[i + 2] = b;
      return buffer[i + 3] = a;
    };
    for (i = j = 0, ref = twl; j <= ref; i = j += 4) {
      buffer[i + 0] = 128;
      buffer[i + 1] = 128;
      buffer[i + 2] = 128;
      buffer[i + 3] = alpha;
    }
    buffer._set(0, 0, 255, 255, 255, alpha);
    for (i = l = 1, ref1 = twl; 1 <= ref1 ? l <= ref1 : l >= ref1; i = 1 <= ref1 ? ++l : --l) {
      buffer._set(i, 0, 224, 224, 224, alpha);
      buffer._set(i, 1, 255, 255, 255, alpha);
      buffer._set(i, twl, 0, 0, 0, alpha);
      buffer._set(0, i, 255, 255, 255, alpha);
      buffer._set(twl, i, 0, 0, 0, alpha);
    }
    xx = ((w / tw) | 0) - 1;
    yy = ((h / tw) | 0) - 1;
    for (x = u = 0, ref2 = xx; 0 <= ref2 ? u <= ref2 : u >= ref2; x = 0 <= ref2 ? ++u : --u) {
      for (y = z = 0, ref3 = yy; 0 <= ref3 ? z <= ref3 : z >= ref3; y = 0 <= ref3 ? ++z : --z) {
        ctx.putImageData(image_data, x * tw, y * tw);
      }
    }
    TextureMosaic.__super__.constructor.call(this, ctx.canvas);
  }

  return TextureMosaic;

})(Fz2D.Texture);

Fz2D.Animation = (function() {
  function Animation(tag1, texture1, count1, delay1) {
    var i, j, ref, w;
    this.tag = tag1;
    this.texture = texture1;
    this.count = count1;
    this.delay = delay1;
    this.ended = true;
    if ((this.count == null) || this.count < 1) {
      if ((this.texture.w % this.texture.h === 0) && (this.texture.w / this.texture.h > 2)) {
        this.count = this.texture.w / this.texture.h;
      } else {
        this.count = 1;
      }
    }
    if (this.delay == null) {
      this.delay = 1000 / this.count;
    }
    w = this.texture.w / this.count;
    this.frames = [];
    for (i = j = 0, ref = this.count - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      this.frames.push(new Fz2D.Rect(this.texture.x + (i * w), this.texture.y, w, this.texture.h));
    }
    this.frame = this.frames[0];
    this._index = 0;
    this._dt = 0;
    this._loop = false;
    if (this.count === 1) {
      this.play = (function(_this) {
        return function() {
          return _this;
        };
      })(this);
    }
  }

  Animation.prototype.onend = function(animation) {};

  Animation.prototype.play = function(looped) {
    this.ended = false;
    this.frame = this.frames[0];
    this._index = 0;
    this._dt = 0;
    this._loop = looped || false;
    return this;
  };

  Animation.prototype.stop = function() {
    this.ended = true;
    return this;
  };

  Animation.prototype.update = function(timer, input) {
    if (this.ended) {
      return null;
    }
    this._dt += timer.dt;
    if (this._dt < this.delay) {
      return null;
    }
    this.frame = this.frames[this._index];
    if (++this._index === this.count) {
      if (this._loop) {
        this._index = 0;
      } else {
        --this._index;
      }
      if (this.ended = this._index > 0) {
        this.onend(this);
      }
    }
    this._dt = 0;
    return null;
  };

  return Animation;

})();

Fz2D.BBox = (function() {
  function BBox(x3, y3, w1, h1) {
    this.x = x3 != null ? x3 : 0;
    this.y = y3 != null ? y3 : 0;
    this.w = w1 != null ? w1 : 0;
    this.h = h1 != null ? h1 : 0;
    this._update();
  }

  BBox.prototype.set = function(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    return this._update();
  };

  BBox.prototype.setPos = function(x, y) {
    this.x = x;
    this.y = y;
    return this;
  };

  BBox.prototype.setSize = function(w, h) {
    this.w = w;
    this.h = h;
    return this._update();
  };

  BBox.prototype.contains = function(p) {
    return (this.p.x >= this.x) && (this.p.x <= this.x + this.w) && (this.p.y >= this.y) && (this.p.y <= this.y + this.h);
  };

  BBox.prototype.overlaps = function(r) {
    return !((this.x > r.x + r.w) || (this.y > r.y + r.h) || (this.x + this.w < r.x) || (this.y + this.h < r.y));
  };

  BBox.prototype.equals = function(r) {
    return this.x === r.x && this.y === r.y && this.w === r.w && this.h === r.h;
  };

  BBox.prototype.isNull = function() {
    return this.w === 0 || this.h === 0;
  };

  BBox.prototype._update = function() {
    this.hw = this.w / 2.0;
    this.hh = this.h / 2.0;
    this.cx = this.x + this.hw;
    this.cy = this.y + this.hh;
    return this;
  };

  return BBox;

})();

Fz2D.Font = (function() {
  function Font(texture1, size1, s, e) {
    var c, end, i, j, ref, ref1, start, w, x, xx, y, yy;
    this.texture = texture1;
    this.size = size1 != null ? size1 : this.texture.h;
    if (s == null) {
      s = ' ';
    }
    if (e == null) {
      e = '~';
    }
    this.chars = {};
    start = (s || ' ').charCodeAt(0);
    end = (e || '~').charCodeAt(0) + 1;
    w = this.texture.w / this.size;
    for (c = j = ref = start, ref1 = end; ref <= ref1 ? j <= ref1 : j >= ref1; c = ref <= ref1 ? ++j : --j) {
      i = c - start;
      xx = i % w;
      yy = (i - xx) / w;
      x = this.texture.x + (xx * this.size);
      y = this.texture.y + (yy * this.size);
      this.chars[String.fromCharCode(c)] = new Fz2D.Rect(x, y, this.size, this.size);
    }
    this.invalid_char = this.chars[String.fromCharCode(end)];
  }

  Font.prototype.centerText = function(ro, text, size, line_spacing, word_spacing) {
    var m;
    if (size == null) {
      size = this.size;
    }
    if (line_spacing == null) {
      line_spacing = size + size;
    }
    if (word_spacing == null) {
      word_spacing = size;
    }
    m = this.measureText(text, size, line_spacing, word_spacing);
    return new Fz2D.Rect(ro.x + ((ro.w - m.w) >> 1), ro.y + ((ro.h - m.h) >> 1), ro.w, ro.h);
  };

  Font.prototype.measureText = function(text, size, line_spacing, word_spacing) {
    var c, h, j, len, maxWidth, w;
    if (size == null) {
      size = this.size;
    }
    if (line_spacing == null) {
      line_spacing = size + size;
    }
    if (word_spacing == null) {
      word_spacing = size;
    }
    w = 0;
    h = 0;
    maxWidth = 0;
    for (j = 0, len = text.length; j < len; j++) {
      c = text[j];
      switch (c) {
        case ' ':
          w += word_spacing;
          continue;
        case '\n':
          if (w > maxWidth) {
            maxWidth = w;
          }
          w = 0;
          h += line_spacing;
          continue;
        case '\t':
          w += 3 * word_spacing;
          continue;
      }
      w += size;
    }
    if (w > 0 && maxWidth === 0) {
      maxWidth = w;
    }
    if (maxWidth > 0 && h === 0) {
      h = size;
    }
    return new Fz2D.Rect(0, 0, maxWidth, h);
  };

  Font.prototype.drawText = function(ctx, text, x, y, size, line_spacing, word_spacing) {
    var c, char, j, len, xx, yy;
    if (size == null) {
      size = this.size;
    }
    if (line_spacing == null) {
      line_spacing = size + size;
    }
    if (word_spacing == null) {
      word_spacing = size;
    }
    xx = x;
    yy = y;
    for (j = 0, len = text.length; j < len; j++) {
      c = text[j];
      switch (c) {
        case ' ':
          xx += word_spacing;
          continue;
        case '\n':
          xx = x;
          yy += line_spacing;
          continue;
        case '\t':
          xx += 3 * word_spacing;
          continue;
      }
      char = this.chars[c] || this.invalid_char;
      ctx.draw(this.texture, char.x, char.y, char.w, char.h, xx, yy, size, size);
      xx += size;
    }
    return xx;
  };

  return Font;

})();

Fz2D.Object = (function() {
  function Object(x3, y3, w1, h1, tag1) {
    this.x = x3;
    this.y = y3;
    this.w = w1;
    this.h = h1;
    this.tag = tag1 != null ? tag1 : 'object';
    this.bounds = new Fz2D.BBox(0, 0, this.w, this.h);
    this.solid = true;
    this.visible = true;
    this.alive = true;
    this.exists = true;
  }

  Object.prototype.kill = function() {
    this.visible = false;
    this.alive = false;
    this.exists = false;
    return this;
  };

  Object.prototype.killAll = function() {
    return this.kill();
  };

  Object.prototype.reset = function(x, y) {
    if (x == null) {
      x = null;
    }
    if (y == null) {
      y = null;
    }
    if (x != null) {
      this.x = x;
    }
    if (y != null) {
      this.y = y;
    }
    this.visible = true;
    this.alive = true;
    this.exists = true;
    return this;
  };

  Object.prototype.resetAll = function() {
    return this.reset();
  };

  Object.prototype.draw = function(ctx) {};

  Object.prototype.update = function(timer, input) {};

  return Object;

})();

Fz2D.Entity = (function(superClass) {
  extend(Entity, superClass);

  function Entity(texture1, x, y, w, h, tag) {
    this.texture = texture1;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (w == null) {
      w = null;
    }
    if (h == null) {
      h = null;
    }
    if (tag == null) {
      tag = null;
    }
    if (h == null) {
      h = this.texture.h;
    }
    if (w == null) {
      if ((this.texture.w % h === 0) && (this.texture.w / h > 2)) {
        w = h;
      } else {
        w = this.texture.w;
      }
    }
    Entity.__super__.constructor.call(this, x, y, w, h, tag);
    this.dx = 0;
    this.dy = 0;
    this.moving = false;
    this.animations = {};
    this.addAnimation('_default', this.texture);
    this.play('_default', true);
  }

  Entity.prototype.clone = function() {
    return new Fz2D.Entity(this.texture, this.x, this.y, this.w, this.h, this.tag);
  };

  Entity.prototype.play = function(tag, looped) {
    this.animation = this.animations[tag];
    this.animation.play(looped);
    return this.animation;
  };

  Entity.prototype.stop = function() {
    this.animation.stop();
    return this.animation;
  };

  Entity.prototype.is = function(tag) {
    return this.animation.tag === tag;
  };

  Entity.prototype.addAnimation = function(tag, texture, count, delay) {
    return this.animations[tag] = new Fz2D.Animation(tag, texture, count, delay);
  };

  Entity.prototype.draw = function(ctx) {
    ctx.draw(this.animation.texture, this.animation.frame.x, this.animation.frame.y, this.animation.frame.w, this.animation.frame.h, this.x, this.y, this.w, this.h);
    return null;
  };

  Entity.prototype.update = function(timer, input) {
    if (!this.animation.ended) {
      this.animation.update(timer);
    }
    if (this.moving) {
      this.x += this.dx * timer.dt;
      this.y += this.dy * timer.dt;
    }
    return null;
  };

  return Entity;

})(Fz2D.Object);

Fz2D.Group = (function(superClass) {
  extend(Group, superClass);

  function Group(x, y, w, h) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (w == null) {
      w = 0;
    }
    if (h == null) {
      h = 0;
    }
    Group.__super__.constructor.call(this, x, y, w, h);
    this._objects = [];
  }

  Group.prototype.recycle = function() {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (!o.exists) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.recycleByTag = function(tag) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (!o.exists && o.tag === tag) {
        return o;
      }
    }
  };

  Group.prototype.recycleByClass = function(klass) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (!o.exists && o instanceof klass) {
        return o;
      }
    }
  };

  Group.prototype.hasAlive = function() {
    return this.firstAlive() != null;
  };

  Group.prototype.hasAliveByTag = function(tag) {
    return this.firstAliveByTag(tag) != null;
  };

  Group.prototype.hasAliveByClass = function(klass) {
    return this.firstAliveByClass(klass) != null;
  };

  Group.prototype.firstAvail = function() {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (!o.exists) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstAvailByTag = function(tag) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (!o.exists && o.tag === tag) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstAvailByClass = function(klass) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (!o.exists && o instanceof klass) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstExisting = function() {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.exists) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstExistingByTag = function(tag) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.exists && o.tag === tag) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstExistingByClass = function(klass) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.exists && o instanceof klass) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstAlive = function() {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.alive) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstAliveByTag = function(tag) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.alive && o.tag === tag) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstAliveByClass = function(klass) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.alive && o instanceof klass) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstDead = function() {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (!o.alive) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstDeadByTag = function(tag) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (!o.alive && o.tag === tag) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.firstDeadByTag = function(klass) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (!o.alive && o instanceof klass) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.add = function(object) {
    this._objects.push(object);
    if (object.group == null) {
      object.group = this;
    }
    return object;
  };

  Group.prototype.remove = function(object) {
    return this.removeByIndex(this._objects.indexOf(object));
  };

  Group.prototype.removeByIndex = function(i) {
    var arr, object;
    if (i > -1) {
      arr = this._objects.splice(i, 1);
      if (arr.length === 1) {
        object = arr[0];
        if (object.group === this) {
          object.group = null;
        }
        return object;
      } else {
        return null;
      }
    } else {
      return null;
    }
  };

  Group.prototype.removeByTag = function(tag) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.tag === tag) {
        return this.remove(o);
      }
    }
    return null;
  };

  Group.prototype.removeByClass = function(klass) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o instanceof klass) {
        return this.remove(o);
      }
    }
    return null;
  };

  Group.prototype.killAll = function() {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      o.killAll();
    }
    return null;
  };

  Group.prototype.resetAll = function() {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      o.resetAll();
    }
    return null;
  };

  Group.prototype.findByTag = function(tag) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.tag === tag) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.findByClass = function(klass) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o instanceof klass) {
        return o;
      }
    }
    return null;
  };

  Group.prototype.first = function() {
    return this._objects[0];
  };

  Group.prototype.last = function() {
    return this._objects[this._objects.length - 1];
  };

  Group.prototype.at = function(i) {
    return this._objects[i];
  };

  Group.prototype.clear = function() {
    return this._objects = [];
  };

  Group.prototype.length = function() {
    return this._objects.length;
  };

  Group.prototype.draw = function(ctx) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.exists && o.visible) {
        o.draw(ctx);
      }
    }
    return null;
  };

  Group.prototype.update = function(timer, input) {
    var j, len, o, ref;
    ref = this._objects;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.exists && o.alive) {
        o.update(timer, input);
      }
    }
    return null;
  };

  return Group;

})(Fz2D.Object);

Fz2D.Gui.Button = (function(superClass) {
  extend(Button, superClass);

  function Button(x, y, text, font, size1, texture_up, texture_down, texture_over) {
    this.font = font;
    this.size = size1 != null ? size1 : this.font.size;
    if (texture_down == null) {
      texture_down = texture_up;
    }
    if (texture_over == null) {
      texture_over = texture_down;
    }
    Button.__super__.constructor.call(this, texture_up, x, y);
    this.addAnimation("up", texture_up);
    this.addAnimation("down", texture_down);
    this.addAnimation("over", texture_over);
    this.label = new Fz2D.Gui.Label('', x, y, this.font, this.size);
    this.setText(text);
  }

  Button.prototype.setText = function(text) {
    var c;
    c = this.font.centerText(this, text, this.size);
    this.label.setText(text);
    this.label.x = c.x;
    this.label.y = c.y;
    this.text = text;
    return this;
  };

  Button.prototype.onclick = function(button) {};

  Button.prototype.draw = function(ctx) {
    Button.__super__.draw.apply(this, arguments);
    if (this.is("down")) {
      this.label.y++;
      this.label.draw(ctx);
      this.label.y--;
    } else {
      this.label.draw(ctx);
    }
    return null;
  };

  Button.prototype.update = function(timer, input) {
    if (Fz2D.contains(this, input.mouse.position)) {
      if (input.mouse[Fz2D.Input.Mouse.Button.LEFT]) {
        this.play("down");
      } else {
        this.play("over");
      }
      if (input.mouse.released[Fz2D.Input.Mouse.Button.LEFT]) {
        this.onclick(this);
      }
    } else if (!this.is("up")) {
      this.play("up");
    }
    return null;
  };

  return Button;

})(Fz2D.Entity);

Fz2D.Gui.Countdown = (function(superClass) {
  extend(Countdown, superClass);

  function Countdown(count1, x, y, font, size1) {
    this.count = count1;
    this.font = font;
    this.size = size1 != null ? size1 : this.font.size;
    Countdown.__super__.constructor.call(this, x, y);
    if (this.count == null) {
      this.count = 0;
    }
    this._count = 0;
    this._dt = 0;
    this.ended = true;
  }

  Countdown.prototype.onend = function(countdown) {};

  Countdown.prototype.reset = function() {
    Countdown.__super__.reset.apply(this, arguments);
    this.ended = false;
    this._dt = 0;
    return this._count = this.count;
  };

  Countdown.prototype.draw = function(ctx) {
    this.font.drawText(ctx, this._count.toString(), this.x, this.y, this.size);
    return null;
  };

  Countdown.prototype.update = function(timer, input) {
    if (this.ended) {
      return null;
    }
    this._dt += timer.dt;
    if (this._dt > 1000) {
      this._dt = 0;
      if (this._count === 0) {
        this.ended = true;
        this.onend(this);
      } else {
        this._count--;
      }
    }
    return null;
  };

  return Countdown;

})(Fz2D.Object);

Fz2D.Gui.Label = (function(superClass) {
  extend(Label, superClass);

  function Label(text, x, y, font, size1) {
    this.font = font;
    this.size = size1 != null ? size1 : this.font.size;
    Label.__super__.constructor.call(this, x, y);
    this.setText(text);
    this.blink = 0;
    this._dt = 0;
  }

  Label.prototype.setText = function(text) {
    var size;
    this.text = text;
    size = this.font.measureText(text, this.size);
    this.bounds.w = this.w = size.w;
    this.bounds.h = this.h = size.h;
    return this;
  };

  Label.prototype.inc = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.setText((this.toInt() + amount).toString());
  };

  Label.prototype.dec = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.inc(-amount);
  };

  Label.prototype.toInt = function() {
    return parseInt(this.text);
  };

  Label.prototype.draw = function(ctx) {
    return this.font.drawText(ctx, this.text, this.x, this.y, this.size);
  };

  Label.prototype.update = function(timer, input) {
    if (!(this.blink > 0)) {
      return;
    }
    this._dt += timer.dt;
    if (!(this._dt > this.blink)) {
      return;
    }
    this._dt = 0;
    return this.visible = !this.visible;
  };

  return Label;

})(Fz2D.Object);

Fz2D.Gui.Mouse = (function(superClass) {
  extend(Mouse, superClass);

  function Mouse() {
    return Mouse.__super__.constructor.apply(this, arguments);
  }

  Mouse.prototype.update = function(timer, input) {
    this.x = input.mouse.x;
    return this.y = input.mouse.y;
  };

  return Mouse;

})(Fz2D.Entity);

Fz2D.HorizontalScroller = (function(superClass) {
  extend(HorizontalScroller, superClass);

  function HorizontalScroller() {
    HorizontalScroller.__super__.constructor.apply(this, arguments);
    this.dx = -0.3;
    this.sx = this.w;
    this.wf = this.w * 1.0;
  }

  HorizontalScroller.prototype.draw = function(ctx) {
    ctx.draw(this.texture, this.w - this.sx, this.y, this.sx, this.h, this.x, this.y, this.sx, this.h);
    return ctx.draw(this.texture, this.x, this.y, this.w - this.sx, this.h, this.sx, this.y, this.w - this.sx, this.h);
  };

  HorizontalScroller.prototype.update = function(timer, input) {
    if (this.sx <= 0) {
      return this.sx = this.w;
    } else {
      return this.sx = Fz2D.clamp(this.sx + timer.dt * this.dx, 0.0, this.wf);
    }
  };

  return HorizontalScroller;

})(Fz2D.Entity);

Fz2D.VerticalScroller = (function(superClass) {
  extend(VerticalScroller, superClass);

  function VerticalScroller() {
    VerticalScroller.__super__.constructor.apply(this, arguments);
    this.dy = 0.3;
    this.sy = 0.0;
    this.hf = this.h * 1.0;
  }

  VerticalScroller.prototype.draw = function(ctx) {
    ctx.draw(this.texture, this.x, this.h - this.sy, this.w, this.sy, this.x, this.y, this.w, this.sy);
    return ctx.draw(this.texture, this.x, this.y, this.w, this.h - this.sy, this.x, this.sy, this.w, this.h - this.sy);
  };

  VerticalScroller.prototype.update = function(timer, input) {
    if (this.sy >= this.h) {
      return this.sy = 0.0;
    } else {
      return this.sy = Fz2D.clamp(this.sy + timer.dt * this.dy, 0.0, this.hf);
    }
  };

  return VerticalScroller;

})(Fz2D.Entity);

Fz2D.Point = (function() {
  function Point(x3, y3) {
    this.x = x3 != null ? x3 : 0;
    this.y = y3 != null ? y3 : 0;
  }

  Point.prototype.set = function(x, y) {
    this.x = x;
    return this.y = y;
  };

  Point.prototype.equals = function(p) {
    return this.x === p.x && this.y === p.y;
  };

  Point.prototype.isNull = function() {
    return this.x === 0 && this.y === 0;
  };

  return Point;

})();

Fz2D.Rect = (function() {
  function Rect(x3, y3, w1, h1) {
    this.x = x3 != null ? x3 : 0;
    this.y = y3 != null ? y3 : 0;
    this.w = w1 != null ? w1 : 0;
    this.h = h1 != null ? h1 : 0;
  }

  Rect.prototype.set = function(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    return this;
  };

  Rect.prototype.setPos = function(x, y) {
    this.x = x;
    this.y = y;
    return this;
  };

  Rect.prototype.setSize = function(w, h) {
    this.w = w;
    this.h = h;
    return this;
  };

  Rect.prototype.contains = function(p) {
    return (this.p.x >= this.x) && (this.p.x <= this.x + this.w) && (this.p.y >= this.y) && (this.p.y <= this.y + this.h);
  };

  Rect.prototype.overlaps = function(r) {
    return !((this.x > r.x + r.w) || (this.y > r.y + r.h) || (this.x + this.w < r.x) || (this.y + this.h < r.y));
  };

  Rect.prototype.equals = function(r) {
    return this.x === r.x && this.y === r.y && this.w === r.w && this.h === r.h;
  };

  Rect.prototype.isNull = function() {
    return this.w === 0 || this.h === 0;
  };

  return Rect;

})();

Fz2D.Size = (function() {
  function Size(w1, h1) {
    this.w = w1 != null ? w1 : 0;
    this.h = h1 != null ? h1 : 0;
  }

  Size.prototype.set = function(w, y) {
    this.w = w;
    return this.h = y;
  };

  Size.prototype.equals = function(p) {
    return this.w === p.w && this.h === p.y;
  };

  Size.prototype.isNull = function() {
    return this.w === 0 && this.h === 0;
  };

  return Size;

})();

Fz2D.Audio = (function() {
  Audio.extension = (function(audio) {
    if (audio.canPlayType('audio/ogg')) {
      return 'ogg';
    } else if (audio.canPlayType('audio/mp3')) {
      return 'mp3';
    } else {
      console.log("No support for audio :(");
      return null;
    }
  })(new window.Audio());

  Audio.supported = (function() {
    if (Fz2D.noaudio != null) {
      console.log('Audio support has been disabled :(');
      return null;
    } else {
      return Audio.extension;
    }
  })();

  Audio.prototype.src = null;

  function Audio(audio) {
    if (audio == null) {
      audio = null;
    }
    if (audio instanceof Fz2D.Audio) {
      this._native = audio._native.cloneNode(true);
    } else {
      this._native = new window.Audio();
      this._native.loop = false;
      this._native.preload = true;
      this._native.addEventListener('loadedmetadata', (function(_this) {
        return function() {
          console.log("Loaded audio: " + _this._native.src);
          return _this.onload(_this);
        };
      })(this));
      this._native.onerror = (function(_this) {
        return function() {
          console.log("Failed to load audio: " + _this._native.src);
          return _this.onload(_this);
        };
      })(this);
    }
  }

  Audio.prototype.onload = function(audio) {};

  Audio.prototype.load = function(path) {
    this.src = path;
    this._native.src = path;
    return this;
  };

  Audio.prototype.play = function(looped) {
    this._native.loop = looped || false;
    this._native.play();
    return this;
  };

  Audio.prototype.replay = function() {
    if (this._native.currentTime > 0) {
      this._native.currentTime = 0;
    }
    this._native.play();
    return this;
  };

  Audio.prototype.pause = function() {
    this._native.pause();
    return this;
  };

  Audio.prototype.stop = function() {
    this._native.pause();
    if (this._native.currentTime > 0) {
      this._native.currentTime = 0;
    }
    return this;
  };

  Audio.prototype.setLoop = function(state) {
    this._native.loop = state;
    return this;
  };

  Audio.prototype.setVolume = function(volume) {
    this._native.volume = parseFloat(Fz2D.clamp(volume, 0.0, 100.0) / 100.0);
    return this;
  };

  Audio.prototype.clone = function() {
    return new Fz2D.Audio(this);
  };

  Audio.prototype.toAudio = function() {
    return this._native;
  };

  return Audio;

})();

Fz2D.Game = (function() {
  Game.run = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return this.instance != null ? this.instance : this.instance = new this(opts);
  };

  function Game(opts) {
    var j, k, len, plugin, ref, v;
    if (opts == null) {
      opts = {};
    }
    this._loop = bind(this._loop, this);
    for (k in opts) {
      v = opts[k];
      this[k] = v;
    }
    if (this.bg == null) {
      this.bg = Fz2D.BG;
    }
    if (this.fg == null) {
      this.fg = Fz2D.FG;
    }
    if (this.selector == null) {
      this.selector = Fz2D.SELECTOR;
    }
    if (this.path == null) {
      this.path = Fz2D.PATH;
    }
    if (!((this.w != null) && (this.h != null))) {
      throw 'Game has invalid width and/or height :(';
    }
    if (Fz2D.Renderer == null) {
      throw 'Canvas is not supported by your browser :(';
    }
    this.storage = new Fz2D.Storage();
    this._plugins_onloadable = [];
    this._plugins_updateable = [];
    this._plugins_drawable = [];
    if (this.plugins != null) {
      ref = this.plugins;
      for (j = 0, len = ref.length; j < len; j++) {
        plugin = ref[j];
        if (plugin.supported != null) {
          this.registerPlugin(new plugin(this));
        }
      }
    }
    this._timer = new Fz2D.Timer();
    this._ctx = new Fz2D.Renderer(this.w, this.h, this.bg, this.selector);
    this.input = new Fz2D.Input(this._ctx.toElement());
    this.scene = new Fz2D.Group(0, 0, this.w, this.h);
    this.draw_call_count = 0;
    this._loader = new Fz2D.Loader(this);
    this._loader.onload = (function(_this) {
      return function() {
        _this.update(_this._timer, _this._input);
        _this.draw(_this._ctx);
        _this.scene.remove(_this._loader);
        _this.loaded = true;
        _this._onloadPlugins();
        return _this.onload(_this);
      };
    })(this);
    this._loop();
    if (this.assets != null) {
      this.scene.add(this._loader);
      this._loadAssets(this.assets);
    } else {
      this.loaded = true;
      this._onloadPlugins();
      this.onload(this);
    }
  }

  Game.prototype.registerPlugin = function(plugin) {
    if (typeof plugin.onload === 'function') {
      if (indexOf.call(this._plugins_onloadable, plugin) < 0) {
        this._plugins_onloadable.push(plugin);
      }
    }
    if (typeof plugin.update === 'function') {
      if (indexOf.call(this._plugins_updateable, plugin) < 0) {
        this._plugins_updateable.push(plugin);
      }
    }
    if (typeof plugin.draw === 'function') {
      if (indexOf.call(this._plugins_drawable, plugin) < 0) {
        this._plugins_drawable.push(plugin);
      }
    }
    return plugin;
  };

  Game.prototype.onload = function(game) {};

  Game.prototype.load = function(path) {
    if (this._loader.group == null) {
      this.loaded = false;
      this.scene.add(this._loader);
    }
    return this._loader.load(path);
  };

  Game.prototype.draw = function(ctx) {
    return this.scene.draw(ctx);
  };

  Game.prototype.update = function(timer, input) {
    return this.scene.update(timer, input);
  };

  Game.prototype._onloadPlugins = function() {
    var j, len, plugin, ref;
    if (!this._plugins_onloaded) {
      ref = this._plugins_onloadable;
      for (j = 0, len = ref.length; j < len; j++) {
        plugin = ref[j];
        plugin.onload(this);
      }
      this._plugins_onloaded = true;
    }
    return null;
  };

  Game.prototype._loadAssets = function(assets) {
    var k, url;
    for (k in assets) {
      url = assets[k];
      if (typeof url === 'object') {
        this._loadAssets(url);
      } else {
        assets[k] = this._loader.load(url);
      }
    }
    return null;
  };

  Game.prototype._loop = function() {
    var j, l, len, len1, plugin, ref, ref1;
    ref = this._plugins_updateable;
    for (j = 0, len = ref.length; j < len; j++) {
      plugin = ref[j];
      plugin.update(this._timer, this.input, this);
    }
    this.update(this._timer, this.input);
    this.draw_call_count = this._ctx.draw_call_count;
    this._ctx.clear();
    this.draw(this._ctx);
    ref1 = this._plugins_drawable;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      plugin = ref1[l];
      plugin.draw(this._ctx, this);
    }
    this._ctx.flush();
    this.input.update();
    this._timer.update();
    return requestAnimationFrame(this._loop);
  };

  return Game;

})();

Fz2D.Storage = (function() {
  function Storage() {}

  Storage.prototype.get = function(name, value) {
    if (value == null) {
      value = 0;
    }
    return JSON.parse(localStorage.getItem(name) || value);
  };

  Storage.prototype.set = function(name, value) {
    return localStorage.setItem(name, JSON.stringify(value));
  };

  Storage.prototype.remove = function(name) {
    return localStorage.removeItem(name);
  };

  return Storage;

})();

Fz2D.Timer = (function() {
  function Timer() {
    this._start = new Date();
    this._last = new Date();
    this._prev = new Date();
    this._frames = 0;
    this.fps = 0;
    this.dt = 0;
    this.ticks = 0;
  }

  Timer.prototype.update = function() {
    var now;
    now = new Date();
    this._frames++;
    if (now - this._prev > 1000) {
      this._prev = now;
      this.fps = this._frames;
      this._frames = 0;
    }
    this.dt = now - this._last;
    this.ticks = now - this._start;
    return this._last = now;
  };

  return Timer;

})();
